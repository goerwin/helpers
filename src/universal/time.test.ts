import {
  getHoursMinsInfo,
  getSeconds,
  timeDiff,
  timeDiffByDates,
} from './time';

it('timeDiff should work', () => {
  const inputOutputSeconds: [number, string][] = [
    [0, '0s'],
    [4, '4s'],
    [-4, '4s'],
    [59, '59s'],
    [60, '1m'],
    [80, '1m 20s'],
    [3599, '59m 59s'],
    [3600, '1h'],
    [3601, '1h'],
    [3659, '1h'],
    [3660, '1h 1m'],
  ];

  inputOutputSeconds.forEach((el) => expect(timeDiff(el[0])).toEqual(el[1]));
});

it('timeDiffByDates should work', () => {
  const inputOutputs = [
    ['2022-02-01T20:00:00.000Z', '2022-02-01T19:59:57.000Z', '3s'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T20:00:00.000Z', '0s'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T20:00:03.000Z', '3s'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T20:00:59.000Z', '59s'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T20:01:00.000Z', '1m'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T20:01:01.000Z', '1m 1s'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T20:01:59.000Z', '1m 59s'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T20:02:00.000Z', '2m'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T20:59:59.000Z', '59m 59s'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T21:00:00.000Z', '1h'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T21:00:01.000Z', '1h'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T21:00:59.000Z', '1h'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T21:01:00.000Z', '1h 1m'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T21:01:01.000Z', '1h 1m'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T21:01:59.000Z', '1h 1m'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T21:02:00.000Z', '1h 2m'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T21:59:59.000Z', '1h 59m'],
    ['2022-02-01T20:00:00.000Z', '2022-02-01T22:00:00.000Z', '2h'],
    ['2022-02-01T20:00:00.000Z', '2022-02-02T19:59:00.000Z', '23h 59m'],
    ['2022-02-01T20:00:00.000Z', '2022-02-02T20:00:00.000Z', '1d'],
    ['2022-02-01T20:00:00.000Z', '2022-02-02T20:59:59.000Z', '1d'],
    ['2022-02-01T20:00:00.000Z', '2022-02-02T21:00:00.000Z', '1d 1h'],
    ['2022-02-01T20:00:00.000Z', '2022-02-02T21:59:00.000Z', '1d 1h'],
    ['2022-02-01T20:00:00.000Z', '2022-02-02T22:00:00.000Z', '1d 2h'],
    ['2022-02-01T20:00:00.000Z', '2022-02-03T19:00:00.000Z', '1d 23h'],
    ['2022-02-01T20:00:00.000Z', '2022-02-03T19:59:00.000Z', '1d 23h'],
    ['2022-02-01T20:00:00.000Z', '2022-02-03T20:00:00.000Z', '2d'],
    ['2022-02-01T20:00:00.000Z', '2022-03-02T20:00:00.000Z', '29d'],
    ['2022-02-01T20:00:00.000Z', '2022-03-03T19:59:00.000Z', '29d 23h'],
    ['2022-02-01T20:00:00.000Z', '2022-03-03T20:00:00.000Z', '1mo'],
    ['2022-02-01T20:00:00.000Z', '2022-03-04T19:00:00.000Z', '1mo'],
    ['2022-02-01T20:00:00.000Z', '2022-03-04T20:00:00.000Z', '1mo 1d'],
    ['2022-02-01T20:00:00.000Z', '2022-04-01T20:00:00.000Z', '1mo 29d'],
    ['2022-02-01T20:00:00.000Z', '2022-04-02T20:00:00.000Z', '2mo'],
    ['2022-02-01T20:00:00.000Z', '2023-02-01T20:00:00.000Z', '1y'],
    ['2022-02-01T20:00:00.000Z', '2023-04-01T20:00:00.000Z', '1y 1mo'],
    ['2022-02-01T20:00:00.000Z', '2023-05-01T20:00:00.000Z', '1y 2mo'],
    ['2022-02-01T20:00:00.000Z', '2024-01-20T20:00:00.000Z', '1y 11mo'],
    ['2022-02-01T20:00:00.000Z', '2024-02-02T20:00:00.000Z', '2y'],
  ];

  inputOutputs.forEach((el) =>
    expect(timeDiffByDates(new Date(el[0]), new Date(el[1]))).toEqual(el[2])
  );
});

it('getHoursMinsInfo should work', () => {
  const inputOutputs: [string, [number, number, string]][] = [
    ['2:03AM', [2, 3, '2:03AM']],
    ['2:03pm', [14, 3, '2:03PM']],
    ['2:03PM', [14, 3, '2:03PM']],
    ['4am', [4, 0, '4:00AM']],
    ['4pm', [16, 0, '4:00PM']],
    ['12am', [0, 0, '12:00AM']],
    ['12pm', [12, 0, '12:00PM']],
    ['05am', [5, 0, '5:00AM']],
    ['05pm', [17, 0, '5:00PM']],
    ['16:00', [16, 0, '4:00PM']],
    ['4:00', [4, 0, '4:00AM']],
    ['14:03', [14, 3, '2:03PM']],
    ['5:30', [5, 30, '5:30AM']],
    ['23:59', [23, 59, '11:59PM']],
    ['0:59', [0, 59, '12:59AM']],
    ['12:59', [12, 59, '12:59PM']],

    ['203am', [2, 3, '2:03AM']],
    ['0203am', [2, 3, '2:03AM']],
    ['420pm', [16, 20, '4:20PM']],
    ['1259pm', [12, 59, '12:59PM']],
    ['125pm', [13, 25, '1:25PM']],
    ['940', [9, 40, '9:40AM']],
    ['1040', [10, 40, '10:40AM']],
    ['1740', [17, 40, '5:40PM']],
    ['2340', [23, 40, '11:40PM']],
    ['000', [0, 0, '12:00AM']],
    ['0000', [0, 0, '12:00AM']],
  ];

  inputOutputs.forEach((io) =>
    expect(getHoursMinsInfo(io[0])).toEqual({
      hours: io[1][0],
      minutes: io[1][1],
      hrsMinsFormatted: io[1][2],
    })
  );

  expect(getHoursMinsInfo('24:02')).toBeNull();
  expect(getHoursMinsInfo('13:03pm')).toBeNull();
  expect(getHoursMinsInfo('12:60pm')).toBeNull();
  expect(getHoursMinsInfo('18:60')).toBeNull();
  expect(getHoursMinsInfo('23:-')).toBeNull();
  expect(getHoursMinsInfo('23:-am')).toBeNull();
  expect(getHoursMinsInfo('13am')).toBeNull();
  expect(getHoursMinsInfo('13pm')).toBeNull();
  expect(getHoursMinsInfo('0am')).toBeNull();
  expect(getHoursMinsInfo('0pm')).toBeNull();
  expect(getHoursMinsInfo('1320pm')).toBeNull();
  expect(getHoursMinsInfo('1320am')).toBeNull();
});

it('getSeconds should work', () => {
  const inputOutput: [string, number][] = [
    ['0', 0],
    ['1', 60],
    ['2', 120],
    ['3s', 3],
    ['50s', 50],
    ['0m', 0],
    ['1m', 60],
    ['2m', 120],
    ['0.5m', 30],
    ['1m', 60],
    ['0h', 0],
    ['1h', 3600],
    ['2h', 7200],
    ['4d', 345600],
  ];

  inputOutput.forEach((el) => expect(getSeconds(el[0])).toEqual(el[1]));

  expect(getSeconds('5hs')).toBeNull();
  expect(getSeconds('')).toBeNull();
  expect(getSeconds('5z')).toBeNull();
  expect(getSeconds('m')).toBeNull();
});
